.PHONY: help build deploy create-job list-jobs clean

help: ## Show this help message
	@echo "Available commands:"
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

build: ## Build all jobs
	@echo "Building common utilities..."
	@cd jobs/common && mvn clean install -q
	@echo "Building all jobs..."
	@for job in $$(ls jobs/ | grep -v common); do \
		echo "Building $$job..."; \
		cd jobs/$$job && mvn clean package -q && cd ../..; \
	done
	@echo "✅ All jobs built successfully!"

build-job: ## Build specific job (usage: make build-job JOB=job-name)
	@if [ -z "$(JOB)" ]; then echo "Usage: make build-job JOB=job-name"; exit 1; fi
	@./deployment/scripts/build-and-deploy-2.sh $(JOB)

create-job: ## Create new job from template (usage: make create-job JOB=job-name)
	@if [ -z "$(JOB)" ]; then echo "Usage: make create-job JOB=job-name"; exit 1; fi
	@./deployment/scripts/create-job.sh $(JOB)

list-jobs: ## List all available jobs
	@echo "Available jobs:"
	@ls -d jobs/*/ | grep -v common | xargs -n 1 basename

deploy-dev: ## Deploy to development environment
	@cd infrastructure && terraform apply -var-file="environments/dev.tfvars"

deploy-staging: ## Deploy to staging environment
	@cd infrastructure && terraform apply -var-file="environments/staging.tfvars"

clean: ## Clean all build artifacts
	@find jobs -name target -type d -exec rm -rf {} + 2>/dev/null || true
	@echo "✅ Cleaned all build artifacts"